{"version":3,"sources":["services/firebase.ts","assets/images/illustration.svg","assets/images/logo.png","assets/images/google-icon.svg","components/Button/styles.ts","components/Button/index.tsx","pages/home/styles.ts","contexts/AuthContext.tsx","hooks/useAuth.ts","pages/home/index.tsx","assets/images/logo.svg","pages/newRoom/styles.ts","pages/newRoom/index.tsx","components/question/styles.tsx","components/question/index.tsx","assets/images/copy.svg","components/roomCode/styles.ts","components/roomCode/index.tsx","hooks/useRoom.ts","pages/room/styles.ts","pages/room/index.tsx","styles/global.ts","assets/images/delete.svg","assets/images/check.svg","assets/images/answer.svg","pages/adminRoom/styles.ts","pages/adminRoom/index.tsx","App.tsx","index.tsx"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","ContainerButton","styled","button","props","isOutlined","Button","ContainerHome","section","MainContent","div","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","response","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unsubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","Home","history","useHistory","roomCode","setRoomCode","push","event","preventDefault","trim","ref","get","roomRef","exists","alert","val","endedAt","src","illustrationImg","alt","logoImg","onClick","className","googleIconImg","onSubmit","type","placeholder","onChange","target","ContainerNewRoom","NewRoom","newRoom","setNewRoom","console","log","title","authorId","firebaseRoom","key","to","ContainerQuestion","isHighlighted","css","isAnswered","Question","content","author","ContainerRoomCode","RoomCode","navigator","clipboard","writeText","code","copyImg","useRoom","roomId","questions","setQuestions","setTitle","on","room","databaseRoom","firebaseQuestions","parsedQuestions","Object","entries","map","likeCount","values","likes","length","likeId","find","off","ContainerRoom","Room","useParams","newQuestion","setNewQuestion","toast","error","question","success","questionId","remove","disabled","aria-label","handleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","GlobalStyle","createGlobalStyle","AdminRoom","update","Date","window","confirm","data-tip","data-for","handleCheckQuestion","checkImg","handleHighlightQuestion","answerImg","place","backgroundColor","effect","handleDeleteQuestion","deleteImg","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.954e79ea.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database'\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATA_BASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nconst auth = firebase.auth();\nconst database = firebase.database();\n\nexport {auth, firebase, database};","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","export default __webpack_public_path__ + \"static/media/logo.5556bc0c.png\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import styled from \"styled-components\";\n\ninterface ContainerProps {\n    isOutlined: boolean;\n}\nexport const ContainerButton = styled.button<ContainerProps>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    height: 45px;\n    border-radius:8px;\n    font-weight: 600;\n \n    background: ${props => (props.isOutlined ? '#FFF' : '#73B1F7')};\n    border: ${props => (props.isOutlined ? '1px solid #73B1F7' : 0)};\n    color: ${props => (props.isOutlined ? '#73B1F7' : '#fff')};\n    padding: 0  32px;\n\n    cursor: pointer;\n\n        \n    transform: filter 0.5s;\n    img {\n        margin-right: 8px;\n    }\n    &:not(:disabled):houver {\n        filter: brightness(0.9);\n    }\n    &:disabled {\n        opacity: 0.6;\n        cursor: not-allowed;\n    }\n`","import { ButtonHTMLAttributes} from 'react'\nimport {ContainerButton} from './styles'\n\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement>& {\n    isOutlined? : boolean;\n}\nexport function Button({isOutlined = false, ...props}: ButtonProps) {\n    return (\n        <ContainerButton isOutlined={isOutlined} {...props}/>\n    )\n}","import styled from \"styled-components\";\n\nexport const ContainerHome = styled.section`\n    display: flex;\n    align-items: stretch;\n\n    height: 100vh;\n\n    aside {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n\n        padding: 120px 80px;\n        flex: 7;\n\n        background: var(--primary_02);\n        color: var(--white);\n        img {\n            width: 80%;\n            min-width: 50px;\n            max-width: 320px;\n        }\n        strong {\n            font: 700 2.5rem Ubuntu, sans-serif;\n            line-height: 42px;\n            margin-top: 16px;\n            \n        }\n        p {\n            font-size: 1.1rem;\n            font-weight: 500;\n            font-family: Nunito, sans-serif;\n            line-height: 32px;\n            margin-top: 10px;\n            color: var(--gray-60);\n        }\n    }\n\n    main {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex: 6;\n\n        padding: 0 32px;\n    }\n\n`;\n\n\nexport const MainContent = styled.div`  \n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n\n    text-align: center;\n\n    width: 100%;\n    max-width: 320px;\n\n    > img {\n        width: 100px;\n        border-radius: 50%;\n        align-self: center;\n    }\n    \n    form {\n        input {\n            height: 50px;\n            border-radius: 8px;\n            padding: 0 16px;\n\n            background: var(--white);\n            border: 1px solid var(--gray-200);\n        }\n\n        button {\n            margin-top: 16px;\n        }\n\n        button, input {\n            width: 100%;\n        }\n    }\n    .create-room {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        margin-top: 64px;\n        height: 50px;\n        border-radius:8px;\n        font-weight: 500;\n        background: #ea4335;\n        color: var(--white);\n\n        cursor: pointer;\n        border: 0;\n        \n        transform: filter 0.5s;\n        img {\n            margin-right: 8px;\n        }\n        &:houver {\n            filter: brightness(0.9);\n        }\n    }\n    .separation {\n        display: flex;\n        align-items: center;\n\n        font-size: 1.1rem;\n        color: var(--gray-200);\n\n        margin: 32px 0;\n        &::before {\n            content: '';\n            flex: 1;\n            height: 1px;\n            background: var(--gray-200);\n            margin-right: 16px;\n\n        }\n        &::after {\n            content: '';\n            flex: 1;\n            height: 1px;\n            background: var(--gray-200);\n            margin-left: 16px;\n        }\n    }\n`","import { createContext, ReactNode, useEffect, useState } from \"react\";\nimport { auth, firebase } from \"../services/firebase\";\n\n\ntype User = {\n    id: string;\n    name: string;\n    avatar: string;\n  }\n  \ntype AuthContextType = {\n    user: User | undefined;\n    signInWithGoogle: () => Promise<void>;\n  }\n\ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const AuthContext = createContext({} as AuthContextType);\n\nexport function AuthContextProvider(props: AuthContextProviderProps) {\n\n    const[user, setUser] = useState<User>();\n\n    useEffect(()=> {\n     const unsubscribe =  auth.onAuthStateChanged(user => {\n        if(user) {\n          const {displayName, photoURL, uid} = user;\n    \n          if(!displayName || !photoURL) {\n            throw new Error('MIssing information from Google Account')\n          }\n    \n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n          })\n        }\n      })\n  \n      return () => {\n        unsubscribe();\n      }\n    }, [])\n  \n  \n  \n    async function signInWithGoogle() {\n      const provider = new firebase.auth.GoogleAuthProvider();\n  \n      const response = await auth.signInWithPopup(provider);\n      if(response.user) {\n        const {displayName, photoURL, uid} = response.user;\n  \n        if(!displayName || !photoURL) {\n          throw new Error('MIssing information from Google Account')\n        }\n  \n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    }\n    return (\n        <AuthContext.Provider value={{user, signInWithGoogle}}> \n            {props.children}\n        </AuthContext.Provider>\n    )\n}","import {useContext} from 'react';\nimport {AuthContext} from '../contexts/AuthContext';\n\nexport function useAuth() {\n    const value = useContext(AuthContext);\n\n    return value;\n}","import { FormEvent, useState } from 'react'\nimport {useHistory} from 'react-router-dom'\n\nimport illustrationImg from '../../assets/images/illustration.svg'\nimport logoImg from '../../assets/images/logo.png'\nimport googleIconImg from '../../assets/images/google-icon.svg'\n\nimport {Button} from '../../components/Button'\n\nimport {ContainerHome, MainContent} from './styles'\n\nimport { useAuth } from '../../hooks/useAuth'\nimport { database } from '../../services/firebase'\n\n\nexport function Home() {\n    const history = useHistory();\n    const {user, signInWithGoogle} = useAuth();\n\n    const[roomCode, setRoomCode] = useState('');\n\n\n   async function handleCreateRoom() {\n       if(!user) {\n        await signInWithGoogle()\n       }\n       history.push('/rooms/new')\n    }\n\n    async function handleJoinRoom(event: FormEvent) {\n        event.preventDefault();\n\n        if(roomCode.trim()==='') {\n            return;\n        }\n\n        const roomRef = await database.ref(`rooms/${roomCode}`).get();\n\n        if(!roomRef.exists()) {\n            alert(\"Ops, essa sala não existe!\");\n            return;\n        }\n\n        if(roomRef.val().endedAt) {\n            alert(\"Room already closed.\");\n            return;\n        }\n        history.push(`/rooms/${roomCode}`);\n\n        \n    }\n    return (\n        <ContainerHome>\n            <aside>\n                <img src={illustrationImg} alt=\"ilustração perguntas e respostas\" />\n                <strong>Crie salas de Q&amp;A ao-vivo</strong>\n                <p>Tire as dúvidas da sua audiência em tempo-real!</p>\n            </aside>\n\n            <main>\n                <MainContent>\n                    <img src={logoImg} alt=\"skOnline\" />\n                \n                    <button onClick={handleCreateRoom} className=\"create-room\">\n                        <img src={googleIconImg} alt=\"logo da google\" />\n                        Crie sua sala com o google\n                    </button>\n                    <div className=\"separation\">ou entre em uma sala</div>\n\n                    <form onSubmit={handleJoinRoom}>\n                        <input \n                            type=\"text\"\n                            placeholder=\"Digite o código da sala\"\n                            onChange={event => setRoomCode(event.target.value)}\n                            value={roomCode}\n                        />\n                        <Button type=\"submit\"> Entrar na sala</Button>\n                    </form>\n                </MainContent>\n            </main>\n\n        </ContainerHome>\n    )\n}","export default __webpack_public_path__ + \"static/media/logo.a88331cb.svg\";","import styled from \"styled-components\";\n\nexport const ContainerNewRoom = styled.section`\n    display: flex;\n    align-items: stretch;\n\n    height: 100vh;\n\n    aside {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n\n        padding: 120px 80px;\n        flex: 7;\n\n        background: var(--primary_02);\n        color: var(--white);\n        img {\n            width: 80%;\n            max-width: 320px;\n        }\n        strong {\n            font: 700 2.5rem Ubuntu, sans-serif;\n            line-height: 42px;\n            margin-top: 16px;\n            \n        }\n        p {\n            font-size: 1.1rem;\n            font-weight: 500;\n            font-family: Nunito, sans-serif;\n            line-height: 32px;\n            margin-top: 10px;\n            color: var(--gray-60);\n        }\n    }\n\n    main {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex: 6;\n\n        padding: 0 32px;\n    }\n\n`;\n\n\nexport const MainContent = styled.div`  \n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n\n    text-align: center;\n\n    width: 100%;\n    max-width: 320px;\n\n    > img {\n        align-self: center;\n    }\n\n    h2 {\n        font: 1.8rem;\n        margin: 35px 0 24px;\n        font-family: Nunito, sans-serif;\n    }\n    \n    form {\n        input {\n            height: 50px;\n            border-radius: 8px;\n            padding: 0 16px;\n\n            background: var(--white);\n            border: 1px solid var(--gray-200);\n        }\n\n        button {\n            margin-top: 16px;\n        }\n\n        button, input {\n            width: 100%;\n        }\n    }\n    p {\n        font-size: 0.9rem;\n        color: var(--gray-200);\n        margin-top: 16px;\n\n        a {\n            text-decoration: none;\n            color: var(--primary_002);\n        }\n    }\n    .create-room {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        margin-top: 64px;\n        height: 50px;\n        border-radius:8px;\n        font-weight: 500;\n        background: #ea4335;\n        color: var(--white);\n\n        cursor: pointer;\n        border: 0;\n        \n        transform: filter 0.5s;\n        img {\n            margin-right: 8px;\n        }\n        &:houver {\n            filter: brightness(0.9);\n        }\n    }\n    .separation {\n        display: flex;\n        align-items: center;\n\n        font-size: 1.1rem;\n        color: var(--gray-200);\n\n        margin: 32px 0;\n        &::before {\n            content: '';\n            flex: 1;\n            height: 1px;\n            background: var(--gray-200);\n            margin-right: 16px;\n\n        }\n        &::after {\n            content: '';\n            flex: 1;\n            height: 1px;\n            background: var(--gray-200);\n            margin-left: 16px;\n        }\n    }\n`","import { FormEvent, useState } from 'react'\nimport {Link, useHistory} from 'react-router-dom'\nimport illustrationImg from '../../assets/images/illustration.svg'\nimport logoImg from '../../assets/images/logo.svg'\n\nimport {ContainerNewRoom, MainContent} from './styles'\nimport {Button} from '../../components/Button'\n\nimport { useAuth } from '../../hooks/useAuth'\nimport { database } from '../../services/firebase'\n\n\n\nexport function NewRoom() {\n    const history = useHistory();\n\n    const[newRoom, setNewRoom] = useState('');\n\n    const {user} = useAuth();\n\n    async function handleCreateRoom(event: FormEvent) {\n        event.preventDefault();\n\n        console.log(newRoom);\n\n        if(newRoom.trim() === ''){\n            return;\n        }\n\n        const roomRef = database.ref('rooms');\n\n        const firebaseRoom = await roomRef.push({\n            title: newRoom,\n            authorId: user?.id,\n        });\n\n        history.push(`/rooms/${firebaseRoom.key}`)\n\n    }\n    return (\n        <ContainerNewRoom>\n            <aside>\n                <img src={illustrationImg} alt=\"ilustração perguntas e respostas\" />\n                <strong>Crie salas de Q&amp; A ao-vivo</strong>\n                <p>Tire as dúvidas da sua audiência em tempo-real</p>\n            </aside>\n\n            <main>\n                <MainContent>\n                    <img src={logoImg} alt=\"skOnline\" />\n                    <h2>Criar uma nova sala</h2>\n                \n                    <form onSubmit={handleCreateRoom}>\n                        <input \n                            type=\"text\"\n                            placeholder=\"Nome da sala\"\n                            onChange={event => setNewRoom(event.target.value)}\n                            value={newRoom}\n                        />\n                        <Button type=\"submit\">Criar sala</Button>\n                    </form>\n                    <p>Quer entrar em uma sala existente? <Link to={\"/\"}>clique aqui</Link></p>\n                </MainContent>\n            </main>\n\n        </ContainerNewRoom>\n    )\n}","import styled, { css } from \"styled-components\";\n\n\ninterface ContainerProps {\n    isAnswered: boolean;\n    isHighlighted: boolean;\n}\nexport const ContainerQuestion = styled.section<ContainerProps>`\n    background: ${props => (props.isHighlighted ? '#e8faffc1' : '#FFFF')};\n    border: ${props => (props.isHighlighted ? '1.5px solid #73B1F7' : 0)};\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0,04);\n    padding: 24px;\n    border-radius: 10px;\n    margin-bottom: 10px;\n\n    transform: translate(0%);\n    transition: 0.2s ease-out;\n    ${props => props.isHighlighted && css`\n    background: '#eefafd';\n    &:hover {\n        -webkit-transform: scale(1.02);\n        -ms-transform: scale(1.02);\n        transform: scale(1.02);\n    }\n  `}\n\n  ${props => props.isAnswered && css`\n    background: #d4d4d4;\n    border: 0;\n  `}\n\n    p {\n        color: var(--gray-800)\n    }\n\n    footer {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-top: 24px;\n        .user-info {\n\n            display: flex;\n            align-items: center;\n\n            img {\n                width: 32px;\n                height: 32px;\n                border-radius: 50%;\n            }\n\n            span {\n                margin-left: 8px;\n                color: var(--gray-200);\n            \n                font-size: 1rem;\n            }\n        }\n\n        > div {\n            display: flex;\n            gap: 16px;\n        }\n\n        button {\n        border:0;\n        background: transparent;\n        cursor: pointer;\n        \n        gap: 5px;\n\n        &.like-button {\n            display: flex;\n            align-items: flex-end;\n            color: var(--gray-200);\n\n            span {\n                font-size: 0.9rem;\n            }\n            svg {\n                width: 20px;\n                height: 20px;\n            }\n\n            &.liked {\n                color: var(--primary_002);\n             \n                svg path {\n                    \n                    stroke: var(--primary_002);\n                }\n            }\n        }\n    }\n  \n}\n   \n`","\nimport { ReactNode } from 'react'\nimport {ContainerQuestion} from './styles'\n\ntype QuestionProps = {\n    content: string;\n    author: {\n        name: string;\n        avatar: string;\n    }\n    children?: ReactNode;\n    isAnswered?:boolean;\n    isHighlighted?: boolean,\n}\nexport function Question({content, author, children, isAnswered=false, isHighlighted=false}: QuestionProps) {\n    return (\n        <ContainerQuestion isAnswered={isAnswered} isHighlighted={isHighlighted}>\n            <p>{content}</p>\n            <footer>\n                <div className=\"user-info\">\n                    <img src={author.avatar} alt={author.name} />\n                    <span>{author.name}</span>\n                </div>\n                <div>\n                    {\n                        children\n                    }\n                </div>\n            </footer>\n        </ContainerQuestion>\n    )\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import styled from \"styled-components\";\n\nexport const ContainerRoomCode = styled.button`\n    display: flex ;\n\n    height: 40px;\n    border-radius: 10px;\n    overflow: hidden;\n\n    background: var(--white);\n    border: 1px solid var(--primary_02);\n    cursor: pointer;\n\n    div {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background: var(--primary_02);\n        padding: 0 12px;\n\n    }\n    span {\n        display: block;\n        align-self: center;\n        flex: 1;\n        padding: 0 16px 0 12px;\n\n        width: 230px;\n        font-size: 0.8rem;\n        font-weight: 500;\n    }\n\n`","import copyImg from '../../assets/images/copy.svg'\nimport {ContainerRoomCode} from './styles'\n\n\ntype RoomCodeProps = {\n    code: string;\n}\nexport function RoomCode(props: RoomCodeProps) {\n    function copyRoomCodeClipboard() {\n        navigator.clipboard.writeText(props.code)\n    }\n\n    return (\n        <ContainerRoomCode onClick={copyRoomCodeClipboard}>\n            <div><img src={copyImg} alt=\"Copy room code\" />\n            </div>\n            <span>Sala #{props.code}</span>\n\n        </ContainerRoomCode>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { database } from \"../services/firebase\";\nimport { useAuth } from \"./useAuth\";\n\n\ntype QuestionType = {\n    id: string;\n    author: {\n        name: string;\n        avatar: string;\n    },\n    content: string;\n    isAnswered: boolean;\n    isHighlighted: boolean;\n    likeId: string | undefined;\n    likeCount: number;\n}\n\ntype FirebaseQuestions = Record<string, {\n    author: {\n        name: string;\n        avatar: string;\n    },\n    content: string;\n    isAnswered: boolean;\n    isHighlighted: boolean;\n    likes: Record<string, {\n        authorId: string\n    }>\n}>\nexport function useRoom(roomId: string) {\n    const {user} = useAuth()\n    const[questions, setQuestions] = useState<QuestionType[]>([])\n    const[title, setTitle] = useState('');\n\n    useEffect(()=> {\n        const roomRef = database.ref(`rooms/${roomId}`);\n\n        roomRef.on('value', room => {\n            const databaseRoom = room.val();\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions?? {};\n            const parsedQuestions = Object.entries(firebaseQuestions).map(([key, value] )=> {\n                return {\n                    id: key,\n                    content: value.content,\n                    author: value.author,\n                    isHighlighted: value.isHighlighted,\n                    isAnswered: value.isAnswered,\n                    likeCount: Object.values(value.likes ?? {}).length,\n                    likeId: Object.entries(value.likes?? {}).find(([key, like]) => like.authorId === user?.id)?.[0]\n                }\n            })\n\n            setTitle(databaseRoom.title)\n            setQuestions(parsedQuestions)\n            \n        })\n\n        return () => {\n            roomRef.off('value');\n        }\n    }, [roomId, user?.id]);\n\n    return {questions, title}\n}","import styled from \"styled-components\";\n\nexport const ContainerRoom = styled.section`\n    header {\n        padding: 24px;\n        border-bottom: 2px solid var(--gray-100);\n\n    }\n\n    .content {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        max-width: 1120px;\n        margin: 0  auto;\n\n        >img {\n            max-height: 65px;\n            border-radius: 50%;\n        }\n\n    }\n\n    main {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 0 15px;\n        .room-title {\n            margin: 32px 0 24px;\n            display: flex;\n            align-items: center;\n\n\n            h1 {\n                font-family: Nunito, sans-serif;\n                font-size: 1.8rem;\n\n                color: var(--primary_04);\n\n            }\n\n            span {\n                margin-left: 16px;\n                background: var( --pink-01);\n                border-radius: 999px;\n\n                padding: 8px 16px;\n                color: var(--white);\n                font-weight: 500;\n                font-size: 0.9rem;\n                \n            }\n        }\n\n        form {\n            textarea {\n                width: 100%;\n                border: 0;\n                padding: 16px;\n                border-radius: 8px;\n                background: var(--white);\n                box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.09);\n\n                resize: vertical;\n                min-height: 130px;\n            }\n\n            .form-footer {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n\n                margin-top: 16px;\n\n                .user-info {\n                    display: flex;\n                    align-items: center;\n\n                    img {\n                        width: 32px;\n                        height: 32px;\n                        border-radius: 50%;\n                    }\n\n                    span {\n                        margin-left: 8px;\n                        color: var(--gray-800);\n                        font-weight: 500;\n                        font-size: 1rem;\n                    }\n                }\n\n                >span {\n                    font-size: 0.9rem;\n                    color: var(--gray-500);\n                    font-weight: 500;\n                    button {\n                        background: transparent;\n                        border: 0;\n                        color: var(--primary_002);\n\n                        text-decoration: underline;\n                        font-size: 0.9rem;\n                        font-weight: 500;\n                        cursor: pointer;\n                    }\n                }\n                \n\n            }\n        }\n        .question-list {\n            margin-top: 35px;\n        }\n    }\n`","import { FormEvent, useEffect, useState } from 'react'\nimport toast from 'react-hot-toast'\nimport {useParams} from 'react-router-dom'\nimport logoImg from '../../assets/images/logo.png'\nimport { Button } from '../../components/Button'\nimport { Question } from '../../components/question'\nimport {RoomCode} from '../../components/roomCode'\nimport { useAuth } from '../../hooks/useAuth'\nimport { useRoom } from '../../hooks/useRoom'\nimport { database } from '../../services/firebase'\n\nimport {ContainerRoom} from './styles'\n\ntype RoomParams = {\n    id: string;\n}\nexport function Room() {\n    const {user} = useAuth();\n    const params = useParams<RoomParams>();\n    const roomId = params.id;\n\n    const[newQuestion, setNewQuestion] = useState('');\n\n    const {title, questions} = useRoom(roomId)\n\n    async function handleSendQuestion(event: FormEvent) {\n        event?.preventDefault();\n        if(newQuestion.trim()===\"\"){\n            return;\n        }\n        if(!user) {\n            toast.error(\"Precisa estar logado!\")\n        }\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user?.name,\n                avatar: user?.avatar,\n            },\n            isHighlighted: false,\n            isAnswered: false\n\n        };\n        await database.ref(`rooms/${roomId}/questions`).push(question);\n\n        setNewQuestion('');\n        toast.success('Pergunta enviada.');\n    }\n\n    async function handleLikeQuestion(questionId: string, likeId: string | undefined) {\n      if(likeId) {\n        await database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove()\n      }else {\n        await database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push(\n            {\n                authorId: user?.id,\n            }\n        )\n      }\n        \n    }\n\n    return (\n       <ContainerRoom>\n           <header>\n               <div className=\"content\">\n                   <img src={logoImg} alt=\"logo da aplicação\" />\n                  <RoomCode  code={roomId}/>\n               </div>\n           </header>\n\n           <main>\n               <div className=\"room-title\">\n                   <h1>Sala {title}</h1>\n                   {\n                       questions.length > 0 && <span>{questions.length} pergunta(s)</span>\n                   }\n\n               </div>\n\n               <form onSubmit={handleSendQuestion}>\n                   <textarea \n                        placeholder=\"O que você quer perguntar?\"\n                        onChange={event => setNewQuestion(event.target.value)}\n                        value={newQuestion}\n                   />\n\n                   <div className=\"form-footer\">\n                        {\n                            user ? (\n                                <div className=\"user-info\">\n                                    <img src={user.avatar} alt={user.name} />\n                                    <span>{user.name}</span>\n\n                                </div>\n                            ):(\n                                <span>Para enviar uma pergunta, <button>faça seu login</button></span>\n                            )\n                        }\n                       <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\n                   </div>\n               </form>\n\n               <div className=\"question-list\">\n               {\n                   questions.map(question => {\n                       return (\n                           <Question \n                                key={question.id} \n                                content={question.content} \n                                author={question.author}\n                                isAnswered={question.isAnswered}\n                                isHighlighted={question.isHighlighted}\n\n                                >\n                                {\n                                    !question.isAnswered && (\n                                        <button \n                                        className={`like-button ${question.likeId ? 'liked': ''}`} \n                                        type=\"button\"\n                                        aria-label=\"Marcar como gostei\"\n                                        onClick={()=> handleLikeQuestion(question.id, question.likeId)}\n                                    >\n                                       {\n                                           question.likeCount > 0 &&  <span>{question.likeCount}</span>\n                                       }\n                                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                                        <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                                        </svg>\n\n                                    </button>\n                                    )\n                                } \n                                </Question>\n                       )\n                   })\n               }\n               </div>\n           </main>\n\n       </ContainerRoom>\n    )\n}","import {createGlobalStyle} from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --white: #FFF;\n    --gray-50: #F7F8FA;\n    --gray-100: #E6E8EB;\n    --gray-200: #AFB2B1;\n    --gray-500: #808080;\n    --gray-800: #494D4B;\n    --orange-500: rgba(255,193,69,0.84);\n    --purple-300: #9F75FF;\n    --purple-400: #9164FA; \n    --purple-500: #8257E5;\n    --pink-01: #FF60FF;\n\n    --primary_01: #19395E;\n    --primary_02: #73B1F7;\n    --primary_002: #50BEF7;\n    --primary_03: #3A86DE;\n    --primary_04: #35485E;\n    --primary_05:#2C67AB;\n  }\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n  html {\n      font: 500 1rem Inter, sans-sarif;\n      color: var(---gray-500);\n    @media(max-width: 1080px) {\n      font-size: 93.75% ; //15px\n    }\n    @media(max-width: 720px) {\n      font-size: 87.5%; //14px\n    }\n  }\n  body {\n    background: var(--gray-50);\n    color: var(--primary_04);\n    -webkit-font-smoothing: antialiased;\n  }\n  button, input, textarea, body {\n    font-family: 'Ubuntu', sans-serif;\n    font-weight: 400;\n    outline: none;\n  }\n  button:hover {\n    opacity: 0.8;\n  }\n  h1, h2, h3, h4, h5, h6, strong {\n    font-weight: 600;\n    font-family: Nunito, sans-serif;\n    color: var(--text);\n  }\n  h1 {\n      font-size: 2rem;\n  }\n  h2{\n      font-size: 1.5rem;\n  }\n  button {\n    cursor: pointer;\n  \n  }\n  [disabled] {\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n`","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","import styled from \"styled-components\";\n\nexport const ContainerRoom = styled.section`\n    header {\n        padding: 24px;\n        border-bottom: 2px solid var(--gray-100);\n    }\n\n    .content {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n\n        max-width: 1120px;\n        margin: 0  auto;\n\n        >h1 {\n            font-size: 1rem;\n        }\n\n        >img {\n            height: 100%;\n            border-radius: 50%;\n            max-height: 60px;\n        }\n        > div {\n            display: flex;\n            gap: 16px;\n            button {\n                height: 40px;\n            }\n        }\n\n    }\n\n    main {\n        max-width: 800px;\n        margin: 0 auto;\n        padding: 0 15px;\n\n        .room-title {\n            margin: 32px 0 24px;\n            display: flex;\n            align-items: center;\n\n\n            h1 {\n                font-family: Nunito, sans-serif;\n                font-size: 1.8rem;\n\n                color: var(--primary_04);\n\n            }\n\n            span {\n                margin-left: 16px;\n                background: var( --pink-01);\n                border-radius: 999px;\n\n                padding: 8px 16px;\n                color: var(--white);\n                font-weight: 500;\n                font-size: 0.9rem;\n                \n            }\n        }\n\n        form {\n            textarea {\n                width: 100%;\n                border: 0;\n                padding: 16px;\n                border-radius: 8px;\n                background: var(--white);\n                box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.09);\n\n                resize: vertical;\n                min-height: 130px;\n            }\n\n            .form-footer {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n\n                margin-top: 16px;\n\n                .user-info {\n                    display: flex;\n                    align-items: center;\n\n                    img {\n                        width: 32px;\n                        height: 32px;\n                        border-radius: 50%;\n                    }\n\n                    span {\n                        margin-left: 8px;\n                        color: var(--gray-800);\n                        font-weight: 500;\n                        font-size: 1rem;\n                    }\n                }\n\n                >span {\n                    font-size: 0.9rem;\n                    color: var(--gray-500);\n                    font-weight: 500;\n                    button {\n                        background: transparent;\n                        border: 0;\n                        color: var(--primary_002);\n\n                        text-decoration: underline;\n                        font-size: 0.9rem;\n                        font-weight: 500;\n                        cursor: pointer;\n                    }\n                }\n                \n\n            }\n        }\n        .question-list {\n            margin-top: 35px;\n        }\n    }\n`","import {useHistory, useParams} from 'react-router-dom';\nimport logoImg from '../../assets/images/logo.png';\nimport { Button } from '../../components/Button';\nimport { Question } from '../../components/question';\nimport {RoomCode} from '../../components/roomCode';\nimport { useRoom } from '../../hooks/useRoom';\n\nimport ReactTooltip from 'react-tooltip';\n\nimport deleteImg from '../../assets/images/delete.svg';\nimport checkImg from '../../assets/images/check.svg';\nimport answerImg from '../../assets/images/answer.svg';\n\nimport {ContainerRoom} from './styles';\nimport { database } from '../../services/firebase';\n\ntype RoomParams = {\n    id: string;\n}\nexport function AdminRoom() {\n    // const {user} = useAuth();\n    const params = useParams<RoomParams>();\n    const roomId = params.id;\n\n    const history  = useHistory();\n\n    const {title, questions} = useRoom(roomId);\n\n    async function handleEndRoom() {\n        await database.ref(`rooms/${roomId}`).update({\n            endedAt: new Date(),\n        });\n\n        history.push('/')\n        \n    }\n\n    async function handleDeleteQuestion(questionId: string) {\n        if(window.confirm(\"Deseja realmente remover essa pergunta?\")) {\n            await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n        }\n    }\n\n    async function handleCheckQuestion(questionId: string) {\n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n            isAnswered: true,\n        })\n    }\n    async function handleHighlightQuestion(questionId: string) {\n       \n        await database.ref(`rooms/${roomId}/questions/${questionId}`).update({\n            isHighlighted: true,\n        })\n    }\n    return (\n       <ContainerRoom>\n           <header>\n               <div className=\"content\">\n                   <img src={logoImg} alt=\"logo da aplicação\" />\n                   <h1>Gerencie suas perguntas</h1>\n                  <div><RoomCode  code={roomId}/>\n                  <Button isOutlined onClick={handleEndRoom}>Encerrar sala</Button></div>\n               </div>\n           </header>\n\n           <main>\n               <div className=\"room-title\">\n                   <h1>Sala {title}</h1>\n                   {\n                       questions.length > 0 && <span>{questions.length} pergunta(s)</span>\n                   }\n\n               </div>\n\n               <div className=\"question-list\">\n               {\n                   questions.map(question => {\n                       return (\n                           <Question \n                                key={question.id} \n                                content={question.content} \n                                author={question.author}\n                                isAnswered={question.isAnswered}\n                                isHighlighted={question.isHighlighted}\n                            >\n                              {\n                                  !question.isAnswered && (\n                                      <>\n                                          <button\n                                                data-tip data-for={`${question.id}respondida`}\n                                                type=\"button\"\n                                                onClick={()=> handleCheckQuestion(question.id)}\n                                            >\n                                                <img src={checkImg} alt=\"Marcar pergunta como respondida\" />\n\n                                            </button>\n                                            <button\n                                                data-tip data-for={`${question.id}destaque`}\n                                                type=\"button\"\n                                                onClick={()=> handleHighlightQuestion(question.id)}\n                                            >\n                                                <img src={answerImg} alt=\"Dar destaque à pergunta\" />\n\n                                            </button>\n                                            <ReactTooltip id={`${question.id}respondida`}\n                                                place=\"top\" \n                                                backgroundColor=\"#50BEF7\"\n                                                effect=\"solid\">\n                                                Marcar como respondida\n                                            </ReactTooltip>\n                                            <ReactTooltip id={`${question.id}destaque`}\n                                                place=\"top\" \n                                                backgroundColor=\"#50BEF7\"\n                                                effect=\"solid\">\n                                                Destacar pergunta\n                                            </ReactTooltip>\n                                      </>\n                                  )\n                              }\n                                <button\n                                data-tip data-for={`${question.id}remove`}\n                                    type=\"button\"\n                                    onClick={()=> handleDeleteQuestion(question.id)}\n                                >\n                                    <img src={deleteImg} alt=\"Remover pergunta\" />\n\n                                </button>\n                                <ReactTooltip id={`${question.id}remove`}\n                                            place=\"top\" \n                                            backgroundColor=\"#50BEF7\"\n                                            effect=\"solid\">\n                                            Remover pergunta\n                                        </ReactTooltip>\n                                \n                            </Question>\n                       )\n                   })\n               }\n               </div>\n           </main>\n\n       </ContainerRoom>\n    )\n}","\nimport {Route, BrowserRouter, Switch} from 'react-router-dom'\n\nimport { Home } from \"./pages/home\";\nimport { NewRoom } from \"./pages/newRoom\";\nimport { Room } from './pages/room';\n\nimport { GlobalStyle } from \"./styles/global\";\n\nimport {AuthContextProvider} from './contexts/AuthContext'\nimport { AdminRoom } from './pages/adminRoom';\n\n\n\nfunction App() {\n\n\n  return (\n  <>\n      <GlobalStyle />\n      <BrowserRouter>\n        <AuthContextProvider>\n          <Switch>\n            <Route path=\"/\" exact component={Home}/>\n            <Route path=\"/rooms/new\" exact component={NewRoom}/>\n            <Route path=\"/rooms/:id\"  component={Room}/>\n            <Route path=\"/admin/rooms/:id\"  component={AdminRoom}/>\n          </Switch>\n\n        </AuthContextProvider>\n      </BrowserRouter>\n  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './services/firebase'\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}